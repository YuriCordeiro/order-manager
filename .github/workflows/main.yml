name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1

jobs:

  build:
    name: "Build and Push Docker Image to Amazon ECR"
    runs-on: ubuntu-latest
    env:
      DB_URL_PREFIX: mongodb+srv
      DB_USER: user-1
      DB_PASS: ${{secrets.DB_PASS}}
      DB_URL_SUFIX: order-manager-environme.xuekaho.mongodb.net/order-manager?retryWrites=true&w=majority&appName=order-manager-environment-cluster

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Amazon ECR "Login" Action for GitHub Actions
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        # A comma-delimited list of AWS account IDs that are associated with the ECR Private registries. If you do not specify a registry, the default ECR Private registry is assumed. If 'public' is given as input to 'registry-type', this input is ignored.
        registries: "975050002971"
        # Which ECR registry type to log into. Options: [private, public]
        registry-type: private
        # Whether to skip explicit logout of the registries during post-job cleanup. Exists for backward compatibility on self-hosted runners. Not recommended. Options: ['true', 'false']      

    - uses: actions/checkout@v4
    - name: Build the Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REGISTRY_NAME: order-manager
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $REGISTRY_NAME:$IMAGE_TAG -t $REGISTRY_NAME:latest .
        docker tag $REGISTRY_NAME:latest $ECR_REGISTRY/$REGISTRY_NAME:$IMAGE_TAG >> $GITHUB_OUTPUT
        docker tag $REGISTRY_NAME:latest $ECR_REGISTRY/$REGISTRY_NAME:latest >> $GITHUB_OUTPUT
        docker push $ECR_REGISTRY/$REGISTRY_NAME --all-tags

    - name: Update kube config
      env:
        EKS_CLUSTER_NAME: 'order-manager'
      run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region ${{ env.AWS_REGION }}

    - name: Deploy to EKS
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}        
        #IMAGE_TAG: ${{ steps.commit.outputs.short }}
      run: |
        sed -i.bak "s|MONGO_CONNECTION_STRING|$DB_URL_PREFIX://$DB_USER:$DB_PASS@$DB_URL_SUFIX|g" k8s/cloud/configmap.yml && \
        kubectl apply -f k8s/cloud/
        #sed -i.bak "s|DOCKER_IMAGE|$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG|g" k8s/cloud/deployment.yml && \
        # cat k8s/cloud/configmap.yml
        

    # - name: EKS kubectl
    #   # You may pin to the exact commit or the version.
    #   # uses: ianbelcher/eks-kubectl-action@843a952573cab2e26f6ace831455592931b41a0c
    #   uses: ianbelcher/eks-kubectl-action@1.6
    #   env:
    #     cluster-name: 'order-manager'
    #   with:
    #     # Your AWS_ACCESS_KEY_ID
    #     aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     # Your AWS_SECRET_ACCESS_KEY
    #     aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     # The region of the cluster
    #     aws_region: ${{ env.AWS_REGION }}
    #     # The name of the cluster you're using
    #     cluster_name: $cluster-name
    #     # EKS role arn that allow access eks cluster (Mostly happen when you create your cluster with CDK).
    #     # eks_role_arn: # optional
    #     # File to read and pass as stdin to kubectl
    #     stdin: ./k8s/cloud
    #     # The arguments that you want to pass through to the kubectl command
    #     args: apply
